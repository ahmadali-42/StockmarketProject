
import java.awt.Color;  // colour library to load new colors.
import java.util.Map;   // for hashMAP
import java.util.logging.Level;     
import java.util.logging.Logger;    // for logger exceptions
import javax.swing.BorderFactory;       // for border setting 
import javax.swing.border.Border;
import javax.swing.table.DefaultTableCellRenderer;      // for table cells setting.
import javax.swing.table.DefaultTableModel;             // for table model settings.


public class UserInterface extends javax.swing.JFrame {

    /**
     * Creates new form UserInterface
     */
    Linker linker = new Linker();
    LinkerTransection linkerTransection = new LinkerTransection();      // Creating an object of LinkTransection Class
    Border redBorder = BorderFactory.createLineBorder(Color.RED, 4);        // creating class object for boder setting to RED
    Border blackBorder = BorderFactory.createLineBorder(Color.BLACK, 1);        // creating class object for boder setting to BLACK back
    
    
    DefaultTableModel model1;  // setting model to table1
    DefaultTableModel model2;  // setting model to table2 
    DefaultTableModel model3;  // setting model to table3 
    DefaultTableModel model4;  // setting model to table4
    
    Object rowData1[];  // setting object for table1 rows
    Object rowData2[];  // setting object for table2 rows
    Object rowData3[];  // setting object for table3 rows
    Object rowData4[];  // setting object for table4 rows
    
    public UserInterface() {    // Class Constructor.
        
        linker.createRandomComapnies(100);  // Generating 100 random companies
        linker.createRandomInvestors(100);  // Generating 100 random Investors.
        initComponents();                   // Inetializing all GUI components.
        jPanel1.setVisible(false);
        jPanel2.setVisible(false);          //Setting up all panel states.
        jPanel3.setVisible(false);
        jLabel12.setVisible(false);
        jLabel1.setVisible(false);
        jLabel16.setVisible(false);
        jLabel10.setVisible(false);
        jLabel17.setVisible(false);
        jLabel24.setVisible(false);         // visibility states on the starting of application.
        jButton2.setVisible(false);
        jLabel13.setVisible(false);
        jPanel1.setVisible(false);
        jPanel2.setVisible(true);
        jTable1.setOpaque(false);
        jTable2.setOpaque(false); 
        jTable3.setOpaque(false);
        jTable4.setOpaque(false);
        
        ((DefaultTableCellRenderer)jTable1.getDefaultRenderer(Object.class)).setOpaque(false);      // setting up invisible panel for tables
        jScrollPane1.getViewport().setOpaque(false);        

        ((DefaultTableCellRenderer)jTable2.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false); 

        ((DefaultTableCellRenderer)jTable3.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane3.getViewport().setOpaque(false); 

        ((DefaultTableCellRenderer)jTable4.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane4.getViewport().setOpaque(false); 
        
        model1 = (DefaultTableModel) jTable1.getModel();            // setting different models for tables.  1,2,3,4 all tables used in project.
        model2 = (DefaultTableModel) jTable2.getModel();
        model3 = (DefaultTableModel) jTable3.getModel();
        model4 = (DefaultTableModel) jTable4.getModel();
        
        rowData1 = new Object[3]; 
        rowData2 = new Object[3];           // setting up new object of different tables to save rows data.
        rowData3 = new Object[4]; 
        rowData4 = new Object[2];
        jScrollPane3.setVisible(false);
        jScrollPane4.setVisible(false);        
        this.setBounds(0, 0, 840, 610);         // setting up main GUI size.
        this.setResizable(false);               // visibility setting.
        buyNow(false);
        liveThread();                           // Live thread, that handle all visuals on screes.
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel35 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel1.setLayout(null);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Budget"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.setRowHeight(24);
        jTable1.setSelectionForeground(new java.awt.Color(255, 0, 0));
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(40, 140, 240, 430);

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Shares", "SharePrice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setFocusable(false);
        jTable2.setRowHeight(24);
        jTable2.setSelectionForeground(new java.awt.Color(255, 0, 0));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
        }

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(290, 140, 240, 430);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 255, 0));
        jLabel11.setText(" $20");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(680, 390, 150, 60);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Buy for            ");
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(540, 390, 290, 60);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/buttonBack.jpg"))); // NOI18N
        jPanel1.add(jLabel14);
        jLabel14.setBounds(540, 390, 290, 60);

        jLabel2.setFont(new java.awt.Font("Vijaya", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Stock Market Simulator");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(50, 10, 310, 50);

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("  Type");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(370, 110, 40, 30);

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("  Type");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(120, 110, 60, 30);

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });
        jPanel1.add(jTextField2);
        jTextField2.setBounds(370, 110, 80, 30);

        jLabel6.setText("Investors_ ID");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 110, 80, 30);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel1.add(jTextField1);
        jTextField1.setBounds(120, 110, 80, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("              Investor's Budget");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(530, 160, 310, 50);

        jLabel7.setText("Company_ID");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(290, 110, 80, 30);

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Ultimate real-time transections and report generations against all");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(50, 60, 360, 14);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel10.setText("It's trading Day!");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(560, 330, 280, 50);

        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Stop Trading!");
        jButton2.setContentAreaFilled(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(720, 0, 120, 30);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/red.png"))); // NOI18N
        jPanel1.add(jLabel13);
        jLabel13.setBounds(720, 0, 120, 30);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/Header.jpg"))); // NOI18N
        jPanel1.add(jLabel8);
        jLabel8.setBounds(0, 0, 840, 90);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/tradingDayGif.gif"))); // NOI18N
        jPanel1.add(jLabel15);
        jLabel15.setBounds(460, 330, 460, 340);

        jLabel16.setFont(new java.awt.Font("Tempus Sans ITC", 0, 36)); // NOI18N
        jLabel16.setText("Welcome,");
        jPanel1.add(jLabel16);
        jLabel16.setBounds(610, 290, 200, 50);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 204, 0));
        jLabel12.setText("$2000.34");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(590, 170, 220, 110);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/tick.gif"))); // NOI18N
        jPanel1.add(jLabel17);
        jLabel17.setBounds(280, 130, 480, 160);

        jLabel24.setForeground(new java.awt.Color(255, 0, 0));
        jLabel24.setText("Share prices 2% deducted from non sellers!");
        jPanel1.add(jLabel24);
        jLabel24.setBounds(560, 90, 250, 30);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/Background.jpg"))); // NOI18N
        jPanel1.add(jLabel5);
        jLabel5.setBounds(0, 0, 840, 590);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Vijaya", 0, 36)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Stock Market Simulator");
        jPanel2.add(jLabel21);
        jLabel21.setBounds(50, 10, 310, 50);

        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Ultimate real-time transections and report generations against all");
        jPanel2.add(jLabel26);
        jLabel26.setBounds(50, 60, 360, 14);

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/Header.jpg"))); // NOI18N
        jPanel2.add(jLabel27);
        jLabel27.setBounds(0, 0, 840, 90);

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/stockMark.gif"))); // NOI18N
        jPanel2.add(jLabel18);
        jLabel18.setBounds(170, 150, 500, 310);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Start Trading Day!");
        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(350, 460, 150, 40);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/buttonBack.jpg"))); // NOI18N
        jPanel2.add(jLabel19);
        jLabel19.setBounds(350, 460, 150, 40);

        jLabel34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/Background.jpg"))); // NOI18N
        jPanel2.add(jLabel34);
        jLabel34.setBounds(0, 0, 840, 590);

        getContentPane().add(jPanel2);

        jPanel3.setLayout(null);

        jLabel22.setFont(new java.awt.Font("Vijaya", 0, 36)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Stock Market Simulator");
        jPanel3.add(jLabel22);
        jLabel22.setBounds(50, 10, 310, 50);

        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Ultimate real-time transections and report generations against all");
        jPanel3.add(jLabel28);
        jLabel28.setBounds(50, 60, 360, 14);

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/Header.jpg"))); // NOI18N
        jPanel3.add(jLabel29);
        jLabel29.setBounds(0, 0, 840, 90);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Report", "Companies with the highest capital", "Companies with the lowest capital", "Investors with high shares", "Investors with low shares" }));
        jPanel3.add(jComboBox1);
        jComboBox1.setBounds(130, 120, 250, 30);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel20.setText("Select a report :");
        jPanel3.add(jLabel20);
        jLabel20.setBounds(20, 120, 100, 30);

        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Generate");
        jButton4.setContentAreaFilled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(390, 120, 80, 30);

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/buttonBack.jpg"))); // NOI18N
        jPanel3.add(jLabel23);
        jLabel23.setBounds(390, 120, 80, 30);

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/stars.gif"))); // NOI18N
        jPanel3.add(jLabel25);
        jLabel25.setBounds(580, 360, 380, 270);

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel30.setText("Final Results");
        jPanel3.add(jLabel30);
        jLabel30.setBounds(620, 220, 210, 50);

        jLabel31.setFont(new java.awt.Font("Tempus Sans ITC", 0, 36)); // NOI18N
        jLabel31.setText("Trading day,");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(540, 170, 200, 50);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Investor's ID", "Shares Buyed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
            jTable4.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel3.add(jScrollPane4);
        jScrollPane4.setBounds(20, 250, 580, 320);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CompanyID", "Name", "Shares", "Capital"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(20, 250, 580, 320);

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Content/Background.jpg"))); // NOI18N
        jPanel3.add(jLabel35);
        jLabel35.setBounds(0, 0, 840, 590);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        jTextField1.setText((String)jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString()); // if mouse clicked than investor share will be st on this text field..
        investorDetails(jTextField1.getText()); // all details of investors will be shown.
        jLabel3.setVisible(false); // hiding label 
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        jTextField2.setText((String)jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0).toString()); // if mouse clicked than comapny details will be set on this text field.
        companyDetails(jTextField2.getText()); // displaying company details
        jLabel4.setVisible(false); // visibility off
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
   
        investorDetails(jTextField1.getText());     // displaying up all investor details of TEXT textfield ID.
        if(jTextField1.getText().equals(""))        // checking weather the field got nothing or yes do somethisn.
        jLabel3.setVisible(true);
        else                            // visibility checks for GUI
        jLabel3.setVisible(false);    
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        investorDetails(jTextField1.getText());  // Displaying up alll investors.
        if(jTextField1.getText().equals(""))    // checking weather the field got nothing or yes do somethisn.
        jLabel3.setVisible(true);
        else                                    // visibility checks for GUI
        jLabel3.setVisible(false);   
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
 
        if(jTextField2.getText().equals(""))        // checking weather textfield contains nothing or yes conaining somethisg
        {
          buyNow(false);                            // hiding buyNow button.
          jLabel4.setVisible(true);                 // showing label,
        }
        else
        {            
          jLabel4.setVisible(false);
          if(isNumeric(jTextField2.getText()))          // checking weather the field data is number in range os 100 or not?
          {
              companyDetails(jTextField2.getText());        // displaying all company details again.
          }
          else
          {
              buyNow(false);                        // hidind button.
          }
           
        }
          
        
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        companyDetails(jTextField2.getText());          // loading all company details to table.
        if(jTextField2.getText().equals(""))            // checking weather textfield contains nothing or yes conaining somethisg
        {
            buyNow(false);                              // hiding buyNow button.
            jLabel4.setVisible(true);                   // showing label,
        }
        else
        {
            jLabel4.setVisible(false); 
            if(isNumeric(jTextField2.getText()))        // checking weather the field data is number in range os 100 or not?
            {   
                companyDetails(jTextField2.getText());
            }  
            else
            {
                buyNow(false);                          // hidind button.
            }
        }      
        
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered

    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jPanel2.setVisible(false);
        jPanel1.setVisible(true);               // setting up visibilities.
        jLabel17.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jPanel1.setVisible(false);
        jPanel3.setVisible(true);   // setting up visibilities.
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(isNumeric(jTextField1.getText()))        // checking is that field containing a number or not
        {
            jTextField1.setBorder(blackBorder);     // setting up field border
            
            if(isNumeric(jTextField2.getText()))    // again checking for border.
            {
                linkerTransection.buyShare(Integer.parseInt(jTextField1.getText()),Integer.parseInt(jTextField2.getText()), linker);
                investorDetails(jTextField1.getText());
                companyDetails(jTextField2.getText());      // AGAIN refresh the table data of both company and investors.
                jTextField2.setBorder(blackBorder);         // setting border color to red.
            }
            else
            {
                jTextField2.setBorder(redBorder);           // setting up border colour back to black.
            }
        }
        else
        {
            jTextField1.setBorder(redBorder);              // setting border colour to back.
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      
        ReportContext report;
       
        if(jComboBox1.getSelectedItem().toString().equals("Companies with the highest capital"))            // applying check and executing strategy pattern
        {
            jScrollPane3.setVisible(true);                                  // SETTING VISIBILITIES
            jScrollPane4.setVisible(false);
            report = new ReportContext(new CompanyHighShares());            // Strategy pattern working here.
            strategyResult(report.executeStrategy());
            
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Companies with the lowest capital"))
        {
            jScrollPane3.setVisible(true);                      // setting visibilities
            jScrollPane4.setVisible(false);            
            report = new ReportContext(new CompanyLowShares());     // strategy pattern working
            strategyResult(report.executeStrategy());       
        }
        else if(jComboBox1.getSelectedItem().toString().equals("Investors with high shares"))
        {
            jScrollPane3.setVisible(false);             // setting visibilities
            jScrollPane4.setVisible(true);            
            report = new ReportContext(new InvestorHighShares());       //strategy pattern working.
            strategyResult(report.executeStrategy());
        }  
        else if(jComboBox1.getSelectedItem().toString().equals("Investors with low shares"))
        {
            jScrollPane3.setVisible(false);
            jScrollPane4.setVisible(true);            //set visibilities
            report = new ReportContext(new InvestorLowShares());        // strategy pattern working here.
            strategyResult(report.executeStrategy());
        }             
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {        // runnable exceptions
            public void run() {         // main execution of project.
                new UserInterface().setVisible(true); // visiblate the model.
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables


public void investorDetails(String state)   
    {   
        int investorSellCheck = 0; // random check variable.
        
                    for( int i = model1.getRowCount() - 1; i >= 0; i-- )            // setting table EMPTY
                    {
                        model1.removeRow(i);            // removing data.
                    }                    
        try {     
             
      for(Iterator iter = linker.investorRepository.getIterator(); iter.hasNext();)         // iterate the linker object by iterator design pattern.
      {          
          
                Investor investor = (Investor)iter.next();

                if(investor.investorBudget == 0.0)  // checking budget
                 {
                     investorSellCheck++;           // incrementing check variable.
                 }  

                if(investorSellCheck == 100)        // checking if 100 comes by couting to close trading day.
                 {
                     jPanel1.setVisible(false);
                     jPanel3.setVisible(true);      // set panel visibility
                 }

                if(state.equals("") || isNumeric(state) == false)       // checking weather the check trues or not.
                {
                   jTable1.setForeground(Color.BLACK); 
                   rowData1[0] = investor.investorId;
                   rowData1[1] = "$ "+investor.investorBudget;    // storing data to table. given
                   model1.addRow(rowData1); 
                   if(linker.redBudget == true)         // checking weather budget excedes or not.
                   {
                       jLabel12.setForeground(Color.red);  // color setting to red.
                   }
                }
                else
                {
                   if(investor.investorId == Integer.parseInt(state))
                   {
                        rowData1[0] = investor.investorId;
                        rowData1[1] = "$ "+investor.investorBudget;         
                        jLabel12.setText("$"+investor.investorBudget);                      // adding data to able rows             
                        model1.addRow(rowData1);
                        jTable1.setForeground(Color.RED);
                        break;                          // breaking loop to set only one entry to tables.
                   }
                }

      } 

        } catch (Exception ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
                     
    }

public void companyDetails(String state)   // company details method.
    {      
        int companySellCheck = 0;
        
        for( int i = model2.getRowCount() - 1; i >= 0; i-- )        // emptying a table.
                    {
                        model2.removeRow(i);                // removing table rows
                    }                    
        try {

      for(Iterator iter = linker.companyRepository.getIterator(); iter.hasNext();)
      {
               Company company = (Company)iter.next(); 
               
               if(company.companyShares == 0)               
                {
                    companySellCheck++; /// adding to company variable.
                }  
               
               if(companySellCheck == 100)
                {
                    jPanel1.setVisible(false);      // setting panel visibility to false.
                    jPanel3.setVisible(true);
                }
               
               if(state.equals("") || isNumeric(state) == false)    // checking weather contains text or not.
                {
                   if(isNumeric(state) == false && company.companyShares == 0)      // checking weather number or not in range of 100
                   {
                       buyNow(false);           // hiding budget button
                       
                   }
                   jTable2.setForeground(Color.BLACK);          // changing foreground.
                   rowData2[0] = company.companyId;
                   rowData2[1] = company.companyShares;         // setting data to company table.
                   rowData2[2] = "$ "+company.companySharePrice;
                   model2.addRow(rowData2); 
                   
                }
                else
                {
                   if(company.companyId == Integer.parseInt(state))
                   {                        
                        rowData2[0] = company.companyId;            // setting up data to tables.
                        rowData2[1] = company.companyShares;
                        rowData2[2] = "$ "+company.companySharePrice;
                        jLabel11.setText(" $"+company.companySharePrice);
                        model2.addRow(rowData2);  
                        jTable2.setForeground(Color.RED);                    
                        buyNow(true);
                        break;
                   }
                }               
      } 

        } catch (Exception ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
                     
    }


public void strategyResult(int resultStrategy)              // printing up strategy resu;ts.
        
    {  
      
    double companyTemp = linker.companyList.get(0).companyShares*linker.companyList.get(0).companySharePrice;  // creating object
    
        try {     
    
    if(resultStrategy == 1 || resultStrategy == 2) /// comparing strategy outcome.
    {        
        for( int i = model3.getRowCount() - 1; i >= 0; i-- )  // emptying tables.
        {
            model3.removeRow(i);
        }       
                    
     for(Iterator iter = linker.companyRepository.getIterator(); iter.hasNext();)           // iterating linker object of company.
      {         

                Company company = (Company)iter.next();

                if(resultStrategy == 1 && company.companyShares*company.companySharePrice >= companyTemp)
                {
                   if(company.companyShares*company.companySharePrice > companyTemp)
                   {
                        for( int i = model3.getRowCount() - 1; i >= 0; i-- )
                        {
                             model3.removeRow(i);
                        } 
                   }
                   
                   rowData3[0] = company.companyId;
                   rowData3[1] = company.companyName;               // setting up a company to this
                   rowData3[2] = company.companyShares;
                   rowData3[3] = ""+company.companyShares*company.companySharePrice;
                   model3.addRow(rowData3);                                             // adding company to rows
                   companyTemp = company.companyShares*company.companySharePrice;
                   
                }
                
                if(resultStrategy == 2 && company.companyShares*company.companySharePrice <= companyTemp)       // comparing the strategy.
                {
                   if(company.companyShares*company.companySharePrice < companyTemp)
                   {
                        for( int i = model3.getRowCount() - 1; i >= 0; i-- )                // emptying table.
                        {
                             model3.removeRow(i);
                        } 
                   }
                   
                   rowData3[0] = company.companyId;
                   rowData3[1] = company.companyName;
                   rowData3[2] = company.companyShares;
                   rowData3[3] = ""+company.companyShares*company.companySharePrice;
                   model3.addRow(rowData3); 
                   companyTemp = company.companyShares;
                   
                }                
                
      } 
    }
    else if(resultStrategy == 3)            // comparing the strategy to 3
    {
        highShares();                       // finding high shares if 3.
    }
    else if(resultStrategy == 4)            // comparing stratefgy to 4 if low shares needied
    {
        lowShares();                        // presenting low shares.
    }
        } catch (Exception ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
                     
    }



public boolean isNumeric(String strNum) {               // method to verify data is numeric or not
    if (strNum == null) {
        return false;
    }
    try {
        int d = Integer.parseInt(strNum);            // if numeric and in range of 100 than true else false.
        if(d >100)
        {
           return false; 
        }
    } catch (NumberFormatException nfe) {
        return false;
    }
    return true;
}

public void liveThread() 
    {
        Thread clock=new Thread()
        {
            public void run()
            {
                for(;;)
                    
                {
                    
        try {
            
                sleep(20);
                if(linker.sharePriceDeduction == true)
                {
                    jLabel24.setText("Share prices 2% deducted from non sellers!");
                    jLabel24.setVisible(true);
                    sleep(800);
                    jLabel24.setVisible(false);
                    linker.sharePriceDeduction = false;
                }
                    
                sleep(10);
                if(isNumeric(jTextField1.getText()) && !jTextField1.getText().equals(""))
                {
                    jLabel12.setVisible(true);
                    jLabel1.setVisible(true);           // visiblate the labes for this 
                    
                    if(linker.redBudget == true)
                    {
                       jLabel12.setForeground(Color.red);       
                       linker.redBudget = false;                // setting check to false.
                    }
                    else
                    {
                        jLabel12.setForeground(Color.decode("#00CC00"));   // changing the label colours.

                    }
                }
                else
                {
                    jLabel12.setVisible(false);   // hiding the labels
                    jLabel1.setVisible(false);
                }
                sleep(200);         // sleeping (waiting for 200 ms.
                 if(jLabel17.isVisible())
                 {
                     sleep(300);
                     jLabel16.setVisible(true);         // visiblating the labels on startup , it's a thread.
                     jLabel10.setVisible(true);                     
                     sleep(1800);
                     jLabel17.setVisible(false);
                     investorDetails("");
                     companyDetails("");
                     sleep(500);
                     jButton2.setVisible(true);
                     jLabel13.setVisible(true);
                 }                        
                    } catch (Exception ex) {
                    }
                }
            }
        };
        
        
        
        clock.start();                      // staring thread , which will handle project visuals.
        
                
    }

public void highShares() // method to finding up high shares.
{
        int temp = 0;
        int id = 0;
        int shares = 0;

        
        for( int i = model4.getRowCount() - 1; i >= 0; i-- )   // emptying table
        {
            model4.removeRow(i);
        }
        
	for (Map.Entry<Integer, Integer> entry : linker.investorShares.entrySet())  // looping to hashMap present in linker.
        {
            if(entry.getValue() > temp)
            {
                id = entry.getKey();
                shares = entry.getValue();          // checking data weather it assures.
                temp = entry.getValue();
            }

	}
        
        rowData4[0] = id;
        rowData4[1] = shares;
        model4.addRow(rowData4); 
    
}

public void lowShares()     // finding a investor with low shares.
{
        int temp = 10000;           // setting max shares randomly
        int id = 0;     // id 0 inetially.
        int shares = 0;     // shares 0

        
        for( int i = model4.getRowCount() - 1; i >= 0; i-- )        // emptying table.
        {
            model4.removeRow(i);            // adding up rows 
        }
        
	for (Map.Entry<Integer, Integer> entry : linker.investorShares.entrySet()) 
        {
            if(entry.getValue() < temp)         // finding largest one.
            {
                id = entry.getKey();
                shares = entry.getValue();      //storing value to find largest one.
                temp = entry.getValue();
            }

	}
        
        rowData4[0] = id;
        rowData4[1] = shares;       // adding largest one to table.
        model4.addRow(rowData4); 
    
}

    public void buyNow(boolean state)
    {
        jLabel11.setVisible(state);
        jLabel14.setVisible(state);
        jButton1.setVisible(state);
    }

}
